1)Организация python проектов
<project>
├── src
│   ├── example_module Главный модуль
│   │    ├── __init__.py
│   │    ├── __main__.py Добавьте сюда этот файл
│   │    └── many_files.py
│   │
│   └── tests/*
│        └── many_tests.py
│
├── .gitignore
├── pyproject.toml
└── README.md

От ChatGPT
my_project/
├── my_package/
│   ├── __init__.py
│   ├── module1.py
│   ├── module2.py
│   └── subpackage/
│       ├── __init__.py
│       └── submodule.py
├── tests/
│   ├── test_module1.py
│   └── test_module2.py
├── data/
│   ├── input_data.csv
│   └── output_data.csv
├── config/
│   ├── settings.py
│   └── logging_config.ini
├── docs/
│   ├── README.md
│   └── documentation.pdf
├── requirements.txt
├── LICENSE
└── main.py
my_package/: Это директория, содержащая пакет my_package. Она может содержать один или несколько модулей (например, module1.py, module2.py). Также в ней может быть подпакет subpackage, содержащий свои собственные модули.

tests/: В этой директории содержатся модули для тестирования кода вашего проекта. Здесь могут располагаться файлы с префиксом test_, например, test_module1.py и test_module2.py.

data/: В данной директории можно хранить различные данные, используемые вашим проектом. Например, здесь могут находиться входные и выходные файлы данных, такие как input_data.csv и output_data.csv.

config/: В этой директории могут находиться файлы конфигурации вашего проекта. Здесь может быть файл settings.py, содержащий настройки проекта, и logging_config.ini, содержащий конфигурацию логирования.

docs/: Эта директория содержит документацию по вашему проекту. Здесь может быть файл README.md, описывающий проект и его использование, а также другие документы, такие как documentation.pdf.

requirements.txt: Этот файл содержит список зависимостей вашего проекта. Он может включать названия и версии пакетов, необходимых для работы проекта.

LICENSE: Это файл, содержащий лицензию вашего проекта.

main.py: Это главный файл вашего проекта, который выполняет основную функциональность или служит точкой входа в приложение.

__init__.py: Это 
2)Организация классов в python проектов
Всегда начинайте с функций.
Переходите к классам в том случае, если у вас возникает ощущение, что вы можете сгруппировать различные подмножества функций.
Если можно сгруппировать классы по различным модулям и кода очень много, то разбиваем код на модули.
3)Структуризовать код(сделано) 
4)Комментарии/документация
